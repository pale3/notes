#! /bin/bash

NOTES_VERSION="1.3"
NOTES_BINARY_NAME="notes"
NOTES_LOCATION="$HOME/.notes"
NOTES_DESCRIPTION="Simple notes taking with template style, inspired by pass tool"
NOTES_MAINTAINER="@ 2015-2025 Marko Rakamaric"
EDITOR="${EDITOR:-vim}"

# notes somename
R="$(tput bold)$(tput setaf 1)"
G="$(tput bold)$(tput setaf 2)"
B="$(tput bold)$(tput setaf 4)"
W="$(tput bold)$(tput setaf 7)"
Y="$(tput bold)$(tput setaf 3)"
y="$(tput setaf 3)"
g="$(tput setaf 2)"
N="$(tput sgr0)"

usage(){
cat << EOF
Usage: $NOTES_BINARY_NAME <action> <note>

${G}Standard actions:${N}
  add  [a]  <note>   crate new note
  edit [e]  <note>   edit already existing note
  del  [rm] <note>   delete existing note
  ls   [l]  <dir>    list all notes, this will ignore one in SKIP_NOTES

${G}Help actions:${N}
  -h,h            show this screen
  -v,--version    print version and exit
EOF
}

version(){
cat << EOF
     This is  : $NOTES_BINARY_NAME
     Version  : $NOTES_VERSION
 Description  : $NOTES_DESCRIPTION
   Copyright  : $NOTES_MAINTAINER
     License  : GNU General Public License, version 3 or later
EOF
}

template(){
	local note=$1

cat << EOF
DATE: $(date)
SUBJECT: $note
STATUS: STARTED
LAST EDIT: $(date)
COMMENT:
---


# vim: ft=notes
EOF
}

info(){
	local i="$1"
	case $i in
		-m ) printf "%s\n" "$2" ;;
		-e ) printf "%s\n" " ${R}* Error${N}: $2"; exit 254 ;;
		-w ) printf "%s\n" " ${Y}*${N}  $2" 	;;
		-i ) printf "%s\n" " ${G}*${N}  $2" 	;;
	esac
}

add_note(){
	local note=${1##*/}
	local path=$NOTES_LOCATION/$(dirname $1)

	# check if path exist
	[[ -f $path/$note ]] && info -e "${B}$path/${G}$note${N} exist, use edit or del!!"

	mkdir -p $path
	template $note > $path/$note

	$EDITOR $path/$note
}

edit_note(){
	local note=${1##*/}
	local path=$NOTES_LOCATION/$(dirname $1)

	[[ ! -f $path/$note ]] && info -e "note: ${B}$path/${G}$note${N} doesn't exist, use add!!"

	# set edit time
	sed -i "s/LAST EDIT:.*/LAST EDIT: $(date)/" $path/$note

	$EDITOR $path/$note
}

del_note(){
	local note=${1##*/}
	local path=$NOTES_LOCATION/$(dirname $1)

	[[ ! -f $path/$note ]] && info -e "Can't delete note: ${B}$path/${G}$note${N} doesn't exist!!"

	[[ $(find $path -type f | wc -l ) -gt 1 ]] && rm $path/$note || rm $path/$note && rmdir -p $path 2>/dev/null

	info -i "Removed ${B}$path/${G}$note${N}"

}

list_note(){
	local arg=${1}
	local treeopt

	case $arg in
		-d | --dir ) treeopt='-d'; shift; note=${1};;
		-a | --all ) unset SKIP_NOTES  ;;
		* ) note=${1} ;;
	esac

	[[ ! -z $SKIP_NOTES ]] && treeopt+=" -I ${SKIP_NOTES}"

	info -m "Notes Store:"
	[[ -z $note ]] && tree -C -l $treeopt --noreport $NOTES_LOCATION | tail -n +2 || \
		(info -m "${B}$note:${N}"; tree -C -l --noreport $NOTES_LOCATION/$note | tail -n +2)

}

precheck(){
    : ${FZF_BIN:="/usr/bin/fzf"}
    : ${TERMCMD:="/usr/bin/urxvtc"}

    type "$TERMCMD" >/dev/null 2>&1 || info -e "Please set TERMCMD"
    type "$FZF_BIN" >/dev/null 2>&1 || info -e "Please install fzf"
}

fzf_note(){
    local out k q extend
    local note linenr
    local header1="Enter: to open | Ctrl-a: to grep all notes | Ctrl-c/Esc: to exit"
    local header2="Esc: go back | Enter: to open | Ctrl-c: to exit"

    cd $NOTES_LOCATION
    while out=$(find . -type f | $FZF_BIN --header="$header1" --reverse \
        --expect=esc,ctrl-c,enter,ctrl-a --print-query );
    do
        mapfile -t out <<< "$out"
        k="${out[1]}"
        q="${out[2]}"

        if [[ "$k" == 'ctrl-a' ]]; then
            out=$(find . -type f -exec grep -nH "." {} \; | $FZF_BIN --header "$header2" -n 2.. \
                --print-query --reverse --expect=ctrl-c,enter)
            mapfile -t out <<< "$out"; k="${out[1]}"; q="${out[2]}";
            extend=1
        fi

        if [[ "$k" == 'enter' ]]; then

            if (( $extend )); then
                note=$(echo ${q}| cut -d ':' -f 1)
                linenr=$(echo ${q} | awk '{print $1}' | sed "s/[^0-9]//g")
                $EDITOR -c 'set nolz' -c :$linenr $note;
                exit
            fi

						$EDITOR $q
						exit

        fi

        if [[ "$k" == 'esc' || "$k" == 'ctrl-c' ]]; then
            exit
        fi
    done
}


note_store_init(){

    if [[ ! -f $HOME/.notes.conf ]]; then
		info -e "Copy notes.conf to $HOME/"
        exit
    fi

	source $HOME/.notes.conf

	[[ ! -d $NOTES_LOCATION ]] && mkdir -p $NOTES_LOCATION && \
		info -m "Notes dir created in: $NOTES_LOCATION"
}

[[ $# -lt 1 ]] && note_store_init && list_note && exit

# init notes base dir and config file
note_store_init

case $1 in
    add | a  ) add_note ${@:2} ;;
    edit| e  ) edit_note ${@:2} ;;
    del | rm ) del_note ${@:2} ;;
	 ls | l  ) list_note ${@:2} ;;
    fzf )
        precheck
        fzf_note ;;
	 -h | --help ) usage ;;
	 -v | --version ) version ;;
	 * )
        [[ ${@:1} =~ ^\-[a-zA-Z0-9] ]] && \
			 info -e "Not recognized: ${@:1}"

        # check if given arg is dir and list it
        # otherwise we should edit note
        [[ -d $NOTES_LOCATION/${@:1} ]] && \
            list_note ${@:1} || \
            edit_note ${@:1}
        ;;
esac
